#!/bin/bash
# info: change dns domain record
# options: USER DOMAIN ID VALUE [PRIORITY] [RESTART]
#
# The function for changing DNS record.


#----------------------------------------------------------#
#                    Variable&Function                     #
#----------------------------------------------------------#

# Argument definition
user=$1
domain=$2
domain_idn=$2
id=$3
dvalue=$(idn -t --quiet -u "$4" )
priority=$5
restart=$6

# Includes
source $VESTA/func/main.sh
source $VESTA/func/domain.sh
source $VESTA/conf/vesta.conf

# Additional argument formatting
format_domain
format_domain_idn
# TODO: $domain_idn not used in this script - maybe $domain should be converted to $doman_idn ?


#----------------------------------------------------------#
#                    Verifications                         #
#----------------------------------------------------------#

check_args '4' "$#" 'USER DOMAIN ID VALUE [PRIORITY] [RESTART]'
is_format_valid 'user' 'domain' 'id' 'dvalue'
is_system_enabled "$DNS_SYSTEM" 'DNS_SYSTEM'
is_object_valid 'user' 'USER' "$user"
is_object_unsuspended 'user' 'USER' "$user"
is_object_valid 'dns' 'DOMAIN' "$domain"
is_object_unsuspended 'dns' 'DOMAIN' "$domain"
is_object_valid "dns/$domain" 'ID' "$id"


#----------------------------------------------------------#
#                       Action                             #
#----------------------------------------------------------#

# Parsing domain config
line=$(grep "ID='$id'" $USER_DATA/dns/$domain.conf)
eval $line

# Null priority for none MX/SRV records
if [ "$TYPE" != 'MX' ] && [ "$TYPE" != 'SRV' ]; then
    priority=''
fi

# Add trailing dot at the end of NS/CNAME/MX/PTR/SRV record
if [[ $TYPE =~ NS|CNAME|MX|PTR|SRV ]]; then
    trailing_dot=$(echo $dvalue | grep "\.$")
    if [ -z $trailing_dot ]; then
        dvalue="$dvalue."
    fi
fi

# Additional verifications
is_dns_fqnd "$TYPE" "$dvalue"
is_dns_nameserver_valid "$domain" "$TYPE" "$dvalue"

# Deleting old record
sed -i "/^ID='$id'/d" $USER_DATA/dns/$domain.conf

# Generating timestamp
time_n_date=$(date +'%T %F')
time=$(echo "$time_n_date" |cut -f 1 -d \ )
date=$(echo "$time_n_date" |cut -f 2 -d \ )

# Adding record
dns_rec="ID='$id' RECORD='$RECORD' TYPE='$TYPE' PRIORITY='$priority'"
dns_rec="$dns_rec VALUE='$dvalue' SUSPENDED='no' TIME='$time' DATE='$date'"
echo "$dns_rec" >> $USER_DATA/dns/$domain.conf

# Sorting records
sort_dns_records

# Updating zone
if [[ "$DNS_SYSTEM" =~ named|bind ]]; then
    update_domain_serial
    update_domain_zone
fi

# Updating dns-cluster queue
if [ ! -z "$DNS_CLUSTER" ]; then
    # Check for first sync
    dlock=$(grep "domain $user $domain" $VESTA/data/queue/dns-cluster.pipe)
    if [ -z "$dlock" ]; then
        cmd="$BIN/v-add-remote-dns-domain $user $domain records"
        echo "$cmd" >> $VESTA/data/queue/dns-cluster.pipe
    fi
fi


#----------------------------------------------------------#
#                       Vesta                              #
#----------------------------------------------------------#

# Restarting named
$BIN/v-restart-dns $restart
check_result $? "DNS restart failed" >/dev/null

# Logging
log_history "changed dns record on $domain to $dvalue"
log_event "$OK" "$ARGUMENTS"

exit
